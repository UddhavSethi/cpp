#include <iostream>
using namespace std;
class CRectangle
{
    int width,height;
    public:
    CRectangle()    //default constructor 
    {
        width=0;
        height=0;
    }
    CRectangle(CRectangle &rectc)    //copy constructor 
    {
        width=rectc.width;
        height=rectc.height;
    }
    
    
    
    CRectangle(int,int);       
    int area()                      //area function 
    {
        return(height*width);
    }
};
    CRectangle::CRectangle(int a,int b)       //declaring function outside scope so first we mention class then constructor in that class
    {
        width=a;                           //here we set w and h so object parametrs would first be sent here then to area function
        height=b;
    }
   
   
 int main()
    {
        CRectangle r;
        CRectangle rect(3,4);
        CRectangle rectb(5,6);
        CRectangle rectc(rect);          //we send rect to copy constructor              
        cout<<"area of this rect is:"<<rect.area()<<endl;
        cout<<"area of this rect is:"<<rectb.area()<<endl;
         cout<<"area of this rect is:"<<r.area()<<endl;
          cout<<"area of this rect is:"<<rectc.area()<<endl;
    }
    // when multpile constructors are used in same code file we call that constructor overloading
    
